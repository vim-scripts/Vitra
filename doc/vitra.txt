*vitra.txt*

                                *Vitra* (Trac UI)

            ____   ____.__  __                   ____    _______
            \   \ /   /|__|/  |_____________    /_   |   \   _  \
             \   Y   / |  \   __\_  __ \__  \    |   |   /  /_\  \
              \     /  |  ||  |  |  | \// __ \_  |   |   \  \_/   \
               \___/   |__||__|  |__|  (____  /  |___| /\ \_____  /
                                            \/         \/       \/

==============================================================================
Contents                                                                *Vitra*

    1. Introduction                                                *VitraIntro*
    2. Settings                                                 *VitraSettings*
    3. Usage                                                       *VitraUsage*
        3.1 Ticket UI                                           *VitraTicketUI*
        3.2 Wiki UI                                               *VitraWikiUI*
        3.3 Others                                                *VitraOthers*
    4. Commands                                                 *VitraCommands*
    5. Keymaps                                                   *VitraKeymaps*
    6. Options                                                   *VitraOptions*
    7. License                                                   *VitraLicence*

==============================================================================
1. Introduction                                                    *VitraIntro*

*Vitra* is a Trac client UI for the wonderful universal editor Vim.  It talks
to a trac server via XML-RPC.  It provides a fancy UI for both wiki and
tickets. A paginated list of tickets window, full ticket detail window along
with attachment window makes a great UI for ticket manipulation.  The wiki UI
combines the list of wiki pages, edit window with the content of the wiki and
a preview window. It also has timeline, search and changeset windows.

==============================================================================
2. Settings                                                     *VitraSettings*

The minimum setting requirement is to define the trac server. One or more trac
server(s) can be defined for use. To add a trac server define the global
dictionary of servers |g:tracServerList| in your .vimrc. Following is an
example of django trac server:

    let g:tracServerList = {}
    let g:tracServerList['djangoproject'] = {
        \ 'scheme': 'https',
        \ 'auth': 'USERNAME:PASSWORD',
        \ 'server': 'code.djangoproject.com',
        \ 'rpc_path': '/login/xmlrpc'
        \ }

By default, scheme and rpc_path have values http and /login/rpc.

If you define more than one trac server, you can also choose a default server
that will be selected when a vim session starts. To define the default server
set the |g:tracDefaultServer| in your .vimrc to the server key of it. e.g.,
>
    let g:tracDefaultServer = 'djangoproject'
<
It is also possible to change the trac server in the running vim session. Use
|TracServer| command to change the trac server to use. It can offer tab
completion for available servers that are defined in |g:tracServerList|. Note
that, this does not set the server to be default for next sessions.

Beside HTTP(S) basic authentication, vitra also supports HTTP Digest
Authentication. To use digest authentication provide the auth realm to the
'auth' key in the server dictionary. e.g.,
>
    let g:tracServerList['mydigesttrac'] = {
        \ 'server': 'localhost:8080/project',
        \ 'auth': 'username:password:digest realm'
        \ }
<

==============================================================================
3. Usage                                                           *VitraUsage*

3.1 Ticket UI                                                   *VitraTicketUI*

Open the UI by |TTOpen|. It will open four windows with a ticket listing,
detail, edit and attachment window. Press <enter> or double click on a line of
the ticket listing window to open a ticket. The ticket list can be paginated
through |TTNextPage|, |TTPreviousPage|, |TTFirstPage| and |TTLastPage|. Ticket
list window uses |Align| plugin to format the columns. Install this plugin to
get the best view.

To filter the ticket list, there will be a number of |TTFilter|, |TTIgnore|
commands available for each of the ticket attributes. To sort the ticket list
use |TTGroupBy| and |TTOrderBy| commands. |TTClearFilter| and
|TTClearAllFilters| are for removing filters from the ticket list.

To update the ticket attributes and contents and adding comments, use the Edit
window. Enter the text into the Edit window and run |TTSetSummary|,
|TTSetDescription|, |TTUpdate| Attribute, etc. to update the ticket.

To create a new ticket enter the description in the Edit window and run the
|TTCreate| command with the ticket summary.

To attach a file to the current ticket, run |TAddAttachment| filepath. It will
be listed in the attachment window. Press <enter> to download the attachment
to the current working folder.

|Vitra| supports Trac workflow actions. It loads a ticket with actions
associated with it. To apply an action to the opened ticket, |TTAction| can be
run, which provides a tab completion for the available actions on the ticket.

|Vitra| keeps the history of opened tickets in the current session. |TBack|
and |TForward| commands provide navigation through the history of opened
tickets.

3.2 Wiki UI                                                       *VitraWikiUI*

Open the wiki UI by |TWOpen|. It will open list of pages, edit wiki, preview
and attachment window. Press <enter> or double click on a line in the wiki
listing window to open that page.

The main or edit wiki window loads the wiki text for the page. This text can
be edited and saved. Run |TWSave| after editing wiki pages. To create new
page run |TWOpen| pagename. Add content in the wiki edit page and run
|TWSave|.

|TAddAttachment| can attach a file to the current wiki page. |TBack| and
|TForward| can traverse the history of opened wiki pages.

The preview window shows a stripped out HTML output. The window has two handy
keymaps, <tab> and <enter>. <tab> can jump to the next hyperlink and pressing
<enter> can open the link in your default browser.

3.3 Others                                                        *VitraOthers*

|TTimeline| opens a window with the Trac timeline. It also offers tab
completion for filtering wiki, ticket, changeset and author. e.g., >
    :TTimeline
    :TTimeline wiki
    :TTimeline nasim
    :TTimeline ticket nasim
<

|TSearch| query opens a window with the search result performed on the Trac.

|TChangeset| id opens the changeset in a window as diff.

|TServer| opens the list of available trac servers. Pressing <enter> on a name
of a server changes the Trac server for the current session.

==============================================================================
4. Commands                                                     *VitraCommands*

The following commands are available for |Vitra|:

    *TracServer* server_key
        Sets the current Trac server to one of the pre-defined server in
        |g:tracServerList|.

    *TWOpen* [page_name]
        Opens the wiki UI. By default, it loads the current wiki page in the
        UI. Given a page name, it loads that wiki page. If the page doesn't
        exist, wiki window loads empty and offers to create the page.

    *TWClose*
        Closes the wiki UI. That is, it deletes all buffers for wiki UI.

    *TWSave*
        Saves the wiki edits back to the current Trac server.

    *TWInfo*
        Shows some information about the current wiki page. i.e., version,
        author, update time, etc.

    *TTOpen* [ticket_id]
        Opens the ticket UI. By default, it loads the current ticket and
        refreshes the ticket list. If a ticket number is given, it loads the
        ticket. Unlike wiki on non-existent ticket, it doesn't offer creating
        one.

    *TTClose*
        Closes the ticket UI. That is, it deletes all buffers for ticket UI.

    *TTEditSummary*
        Loads the current ticket summary into edit window for editing.

    *TTEditDescription*
        Loads the current ticket description into edit window for editing.

    *TTSetSummary*
        Sets the summary field for current ticket. The summary is taken from
        the "Ticket: Edit" window.

    *TTSetDescription*
        Sets the description for current ticket. The description is taken from
        the "Ticket: Edit" window.

    *TTAddComment*
        Adds a comment to the current ticket. The comment is taken from the
        "Ticket: Edit' window.

    *TTAction* [action [value]]
        Performs an action on the current ticket defined by the Trac workflow.
        It validates the action before the commit. It also offers the
        available action options that was loaded at ticket open time.

    *TTUpdate* Attribute value
        Update the attribute of the current ticket to the given value. Some of
        the attributes provide tab completion on valid values.

    *TTOrderBy* attribute
        Sort ticket list by ordering the values of given attribute. It has tab
        completion during command.

    *TTGroupBy* attribute
        Sort ticket list by grouping the values of given attribute. It has tab
        completion during command.

    *TTFilter* Attribute value
        Filter the ticket list on the given attribute value. It has tab
        completion.

    *TTIgnore* Attribute value
        Filter the ticket list ignoring the given attribute value. It has tab
        completion.

    *TTClearFilter* attribute
        Clear the attribute filter. Tab completion is available.

    *TTClearAllFilters*
        Clears all filters from the ticket list.

    *TTNextPage*
        Go to the next page of ticket list.

    *TTPreviousPage*
        Go to the previous page of ticket list.

    *TTFirstPage*
        Go to the first page of ticket list.

    *TTLastPage*
        Go to the last page of ticket list.

    *TBack*
        Navigate back to the history of opened wiki/ticket list.

    *TForward*
        Navigate forward to the history of opened wiki/ticket list.

    *TPreview*
        Preview the wiki content as HTML in your browser.

    *TAddAttachment* file_path
        Add file to the current wiki page/ticket.

    *TTimeline*
        Shows the Trac timeline. Optionally can take 'wiki', 'ticket' or
        'changeset' and "author" to filter the timeline.

    *TSearch* query
        Searches the trac server for the given query.

    *TChangeset* changeset
        Shows the diff of a changeset.

    *TServer*
        Opens a list of available Trac servers.

==============================================================================
5. Keymaps                                                       *VitraKeymaps*

Following is the list of keymaps available for different buffers in the UI.

Ticket listing window has -
    <enter>: opens the ticket corresponding to the current line
    <double-click>: same as <enter> for mouse

Ticket window has -
    <tab>: jumps to the next header
    <C-]>: jumps to the next hyperlink
    <enter>: opens the current hyperlink into the default browser

Wiki listing window has -
    <enter>: opens the page at the current line
    <double-click>: same as <enter> for mouse

Wiki window has -
    <C-]>: opens a wiki page under cursor, i.e., :TWOpen <C-R><C-W>
    <double-click>: same as <C-]> for mouse
    <wo>: opens the wiki page which is written as [wiki:some/page page], the
        cursor must be before : (semicolon)
    <w]>: opens the wiki page which is written as wiki:"some/page" or
        [[some/page]], the cursor must be before 'some/page'
    <tab>: jumps to the next header
    <c-tab>: jumps to the next wiki link

Wiki Preview has -
    <tab>: jumps to the next hyperlink
    <enter>: opens the hyperlink under current cursor in the default browser

Attachment window has -
    <enter>: downloads the attachment under current cursor into the current
        folder

Search and Timeline window has -
    <tab>: jumps to the next entry
    <C-]>: opens a wiki page for the word under current cursor
    <enter>: opens a ticket, wiki or changeset under current line

Server window has -
    <enter>: sets the current Trac server to the name under cursor.

<c-l> reloads ticket or wiki UI, when on a ticket or wiki buffer respectively.

==============================================================================
6. Options                                                       *VitraOptions*

The following options are available for |Vitra|:

    *g:tracDefaultServer*  ''
        Set your preferred trac server, if you have more than one defined in
        |g:tracServerList|.

    *g:tracDefaultComment* 'Updated from Vitra'
        Default comment to use when saving changes to trac.

    *g:tracTicketClause* 'status!=closed'
        This provides a default filtering options for ticket listing.

    *g:tracTicketGroup* 'milestone'
        Set to your preferred attribute for listing tickets in groups.

    *g:tracTicketOrder* 'priority'
        Set to your preferred attribute for listing tickets in order.

    *g:tracTicketStyle* 'full'
        Unless set to 'full', the ticket listing window will appear in the
        ticket UI. Also this will hide all other buffers other than the ticket
        UI.

    *g:tracWikiStyle* 'full'
        If set to 'full', the wiki UI will hide all other buffers.

    *g:tracWikiPreview* 1
        If set to 1, the wiki UI will show a preview of the current page.

    *g:tracWikiToC* 1
        If set to 1, the wiki UI will show the list of available pages.

    *g:tracHideTracWiki* 1
        If set to 1, the list of wiki pages will not show the Trac's own pages.

    *g:tracTimelineMax* 50
        Sets the maximum entries to show in a timeline window.

==============================================================================
7. License                                                       *VitraLicence*

Copyright (c) 2011 M. Nasimul Haque

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
